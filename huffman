from collections import Counter


# every node object will have two children, otherwise is a leave
class Node(object):
    def __init__(self, left=None, right=None):
        self.left = left
        self.right = right

    def getChild(self):
        return self.left, self.right


def get_code(node, code=''):
    if type(node) is str:
        # stop!!!
        return {node: code}

    # get the children
    left, right = node.getChild()

    # recursive function
    huffman_code = dict()
    huffman_code.update(get_code(left, code + '0'))
    huffman_code.update(get_code(right, code + '1'))

    return huffman_code


def encode(message, huffman_code):
    encode_str = ""
    for i in message:
        if huffman_code.get(i, None) is not None:
            encode_str += huffman_code.get(i, None)
    return encode_str


def decode(encode_str, huffman_tree):
    hfm_tree_backup = huffman_tree
    words_str = ""      # Records the restored text
    # Read one encrypted character at a time
    for i in encode_str:
        if i == "0":
            huffman_tree = huffman_tree.left    # find the left tree
            # Determine if it is a leaf, and if it is then add it to the text
            if getattr(huffman_tree, "left", None) is None:
                words_str = words_str + huffman_tree
                huffman_tree = hfm_tree_backup
        elif i == "1":
            huffman_tree = huffman_tree.right
            # According to Hoffmann's principle of composition, if there is a left subtree or a right subtree, there must be pairs
            if getattr(huffman_tree, "left", None) is None:
                words_str = words_str + huffman_tree
                huffman_tree = hfm_tree_backup
    return words_str


def calculateTotalCost():
    # 1、calculate message bits，mean num*the number of code
    total = 0
    for i in freqs_sorted:
        total += i[1] * len(huffman_code[i[0]])
        #print(total)
    #print(len(freqs_sorted))
    #(1)for..
    #for i in freqs_sorted:
    #(2)from the first character
        #print "values : %s" % freqs_sorted.values()
        #print(values)
        #print(freqs_sorted.get[0])
        #break
    #(3)counter ,message bits
    #2、calculate table bits，mean 8+the number of code
    total_table = 0
    print(huffman_code.keys())
    code = huffman_code.keys()
    for i in freqs_sorted:
        #print(i[0])
        #for j in code:
            #print(j)
        total_table += (num + len(huffman_code[i[0]]))
        #print(total_table)
    #3、total cost=message+table
    totalcost = total + total_table
    print(totalcost)



def make_the_tree(freqs_sorted):
    # as long as freqs_sorted.length > 1
    while len(freqs_sorted) > 1:
        # combine the two smallest one
        key1, value1 = freqs_sorted[0]
        key2, value2 = freqs_sorted[1]

        # delete them
        freqs_sorted = freqs_sorted[2:]

        # add the new combination to freqs_sorted
        new_value = value1 + value2
        new_node = Node(key1, key2)

        # add to freqs_sorted
        freqs_sorted.append((new_node, new_value))

        # sort again!!
        freqs_sorted = sorted(freqs_sorted, key=lambda item: item[1])

    return freqs_sorted[0][0]
    # return root node (so we can use this generating coding....)


# input
message = 'AAABBBBBBEEEDABEEDCC'
num = 8

# count the letters
# use Counter, then convert to dictionary
freqs = dict(Counter(message))  # {'A': 4, 'B': 7, 'E': 5, 'D': 2, 'C': 2}
# print(freqs['A'])  #4

# sort them from smallest to biggest
# {'C': 2, 'D': 2, 'A': 4, 'E': 5, 'A': 7}
freqs_sorted = sorted(freqs.items(), key=lambda item: item[1])

# make the tree by combining the smallest one, and delete those guys
root = make_the_tree(freqs_sorted)

# get the code
huffman_code = get_code(root)

# print the code
print(huffman_code)
# {'A': '01'; 'B': '11'; 'C': '000'; 'D': '001'; 'E': '10'}

# task1: decode the encoded message to the original message
# original_message = decode(huffman_code)
encode_str = encode(message, huffman_code)
print(encode_str)
original_message = decode(encode_str, root)
print(original_message)

# task2: calculate the total cost --> message + table
print(calculateTotalCost())
